{
  "detail": "(sqlite3.ProgrammingError) Error binding parameter 7: type 'HttpUrl' is not supported\n[SQL: INSERT INTO products (name, description, price, in_stock, category, available, image_url, discount) VALUES (?, ?, ?, ?, ?, ?, ?, ?)]\n[parameters: ('mouse', 'wireless mouse', 29.99, 10, 'electronic', 1, HttpUrl('https://example.com/image.png'), 0.05)]\n(Background on this error at: https://sqlalche.me/e/20/f405)"
}
def create_product(db: Session, data: schemas.ProductCreate):
    try:
        product_data = data.dict()
        if product_data.get("image_url"):
            product_data["image_url"] = str(product_data["image_url"])  # Convert HttpUrl to string

        product = models.Product(**product_data)
        db.add(product)
        db.commit()
        db.refresh(product)
        return product
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))
from sqlalchemy.orm import Session
from fastapi import HTTPException, status
from . import models, schemas


def get_product(db: Session, product_id: int) -> models.Product:
    product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not product:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Product not found"
        )
    return product


def list_products(db: Session, category: str | None, available: bool | None):
    query = db.query(models.Product)
    if category:
        query = query.filter(models.Product.category == category)
    if available is not None:
        query = query.filter(models.Product.available == available)
    return query.all()


def create_product(db: Session, data: schemas.ProductCreate):
    product = models.Product(**data.dict())
    db.add(product)
    db.commit()
    db.refresh(product)
    return product


def update_product(db: Session, product_id: int, data: schemas.ProductUpdate):
    product = get_product(db, product_id)
    update_data = data.dict(exclude_unset=True)
    
    for field, value in update_data.items():
        setattr(product, field, value)

    db.commit()
    db.refresh(product)
    return product


def delete_product(db: Session, product_id: int):
    product = get_product(db, product_id)
    db.delete(product)
    db.commit()
