# app.py
from fastapi import FastAPI, HTTPException, status, Depends, Query, Path
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Numeric, CheckConstraint
from sqlalchemy.orm import sessionmaker, declarative_base, Session
from pydantic import BaseModel, Field, PositiveFloat, NonNegativeInt
import typing

DATABASE_URL = "sqlite:///./products.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()

# SQLAlchemy Model
class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(120), nullable=False)
    description = Column(String, nullable=True)
    price = Column(Numeric(10, 2), nullable=False)
    in_stock = Column(Integer, nullable=False, default=0)
    category = Column(String(50), nullable=False)
    available = Column(Boolean, nullable=False, default=True)
    discount = Column(Numeric(4, 2), nullable=True)

    __table_args__ = (
        CheckConstraint("price > 0", name="check_price_positive"),
        CheckConstraint("in_stock >= 0", name="check_stock_non_negative"),
    )

    @property
    def discounted_price(self):
        if self.discount and 0 < self.discount < 1:
            return float(self.price) * (1 - float(self.discount))
        return float(self.price)

Base.metadata.create_all(bind=engine)

# Pydantic Schemas
class ProductBase(BaseModel):
    name: str = Field(..., max_length=120)
    description: str | None = None
    price: PositiveFloat
    in_stock: NonNegativeInt = 0
    category: str = Field(..., min_length=1)
    available: bool = True
    discount: float | None = Field(default=None, ge=0, le=1)

class ProductCreate(ProductBase):
    pass

class ProductUpdate(BaseModel):
    name: str | None = None
    description: str | None = None
    price: PositiveFloat | None = None
    in_stock: NonNegativeInt | None = None
    category: str | None = None
    available: bool | None = None
    discount: float | None = Field(default=None, ge=0, le=1)

class ProductRead(ProductBase):
    id: int
    discounted_price: float

    class Config:
        from_attributes = True

# FastAPI App
app = FastAPI(title="E-Commerce Product Management System")

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Routes
@app.post("/products", response_model=ProductRead, status_code=status.HTTP_201_CREATED)
def add_product(product: ProductCreate, db: Session = Depends(get_db)):
    p = Product(**product.dict())
    db.add(p)
    db.commit()
    db.refresh(p)
    print("📦 Added product:", p.name)
    return p

@app.get("/products", response_model=typing.List[ProductRead])
def list_products(
    category: typing.Optional[str] = Query(None),
    available: typing.Optional[bool] = Query(None),
    db: Session = Depends(get_db)
):
    query = db.query(Product)
    if category:
        query = query.filter(Product.category == category)
    if available is not None:
        query = query.filter(Product.available == available)
    results = query.all()
    print(f"📦 Listing products (category={category}, available={available})")
    return results

@app.get("/products/{product_id}", response_model=ProductRead)
def fetch_product(product_id: int = Path(..., ge=1), db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    print(f"🔍 Fetching product ID: {product_id}")
    return product

@app.put("/products/{product_id}", response_model=ProductRead)
def update_product(product_id: int, updates: ProductUpdate, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    for field, value in updates.dict(exclude_unset=True).items():
        setattr(product, field, value)
    db.commit()
    db.refresh(product)
    print(f"✏️ Updated product ID: {product_id}")
    return product

@app.delete("/products/{product_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_product(product_id: int, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    db.delete(product)
    db.commit()
    print(f"🗑️ Deleted product ID: {product_id}")
