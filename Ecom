Database .py 
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base, scoped_session

DATABASE_URL = "sqlite:///./products.db"          # swap for Postgres/MySQL in prod

engine = create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)

SessionLocal = scoped_session(sessionmaker(bind=engine, autocommit=False, autoflush=False))
Base = declarative_base()
Model .py 
from sqlalchemy import (
    Column, Integer, String, Numeric, Boolean,
    CheckConstraint, Text
)
from .database import Base

class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(120), nullable=False)
    description = Column(Text, nullable=True)
    price = Column(Numeric(10, 2), nullable=False)
    in_stock = Column(Integer, nullable=False, default=0)
    category = Column(String(50), nullable=False)
    available = Column(Boolean, nullable=False, default=True)
    image_url = Column(String(255), nullable=True)
    discount = Column(Numeric(4, 2), nullable=True)  # e.g. 0.15 for 15 %

    __table_args__ = (
        CheckConstraint("price > 0", name="ck_price_positive"),
        CheckConstraint("in_stock >= 0", name="ck_stock_non_negative"),
    )

    @property
    def discounted_price(self):
        if self.discount and 0 < self.discount < 1:
            return float(self.price) * (1 - float(self.discount))
        return float(self.price)
Schema.py 
from pydantic import BaseModel, Field, HttpUrl, PositiveFloat, NonNegativeInt

class ProductBase(BaseModel):
    name: str = Field(..., max_length=120)
    description: str | None = None
    price: PositiveFloat
    in_stock: NonNegativeInt = 0
    category: str = Field(..., min_length=1)
    available: bool = True
    image_url: HttpUrl | None = None
    discount: float | None = Field(
        default=None, ge=0, le=1,
        description="Fraction between 0 and 1 (e.g. 0.2 for 20 %)"
    )

class ProductCreate(ProductBase):
    pass

class ProductUpdate(BaseModel):
    name: str | None = Field(None, max_length=120)
    description: str | None = None
    price: PositiveFloat | None = None
    in_stock: NonNegativeInt | None = None
    category: str | None = Field(None, min_length=1)
    available: bool | None = None
    image_url: HttpUrl | None = None
    discount: float | None = Field(None, ge=0, le=1)

class ProductRead(ProductBase):
    id: int
    discounted_price: float

    class Config:
        orm_mode = True
Crud.py 
from sqlalchemy.orm import Session
from fastapi import HTTPException, status
from . import models, schemas

def get_product(db: Session, product_id: int) -> models.Product:
    product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not product:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail="Product not found")
    return product

def list_products(db: Session, category: str | None, available: bool | None):
    query = db.query(models.Product)
    if category:
        query = query.filter(models.Product.category == category)
    if available is not None:
        query = query.filter(models.Product.available == available)
    return query.all()

def create_product(db: Session, data: schemas.ProductCreate):
    product = models.Product(**data.dict())
    db.add(product)
    db.commit()
    db.refresh(product)
    return product

def update_product(db: Session, product_id: int, data: schemas.ProductUpdate):
    product = get_product(db, product_id)
    for field, value in data.dict(exclude_unset=True).items():
        setattr(product, field, value)
    db.commit()
    db.refresh(product)
    return product

def delete_product(db: Session, product_id: int):
    product = get_product(db, product_id)
    db.delete(product)
    db.commit()
from fastapi import FastAPI, Depends, Query, Path, status
from sqlalchemy.orm import Session
from typing import List, Annotated

from . import models, schemas, crud
from .database import Base, engine, SessionLocal

Base.metadata.create_all(bind=engine)   # auto‑create tables for demo

app = FastAPI(title="E‑Commerce Product Management System")

# ---------- Dependencies ----------
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

DB = Annotated[Session, Depends(get_db)]

# ---------- Routes ----------
@app.post(
    "/products",
    response_model=schemas.ProductRead,
    status_code=status.HTTP_201_CREATED
)
def add_product(product: schemas.ProductCreate, db: DB):
    return crud.create_product(db, product)

@app.get(
    "/products",
    response_model=List[schemas.ProductRead]
)
def list_products(
    category: str | None = Query(None, description="Filter by category"),
    available: bool | None = Query(None, description="available=true/false"),
    db: DB = Depends(get_db)
):
    return crud.list_products(db, category, available)

@app.get(
    "/products/{product_id}",
    response_model=schemas.ProductRead
)
def fetch_product(
    product_id: int = Path(..., ge=1),
    db: DB = Depends(get_db)
):
    return crud.get_product(db, product_id)

@app.put(
    "/products/{product_id}",
    response_model=schemas.ProductRead
)
def update_product(
    product_id: int = Path(..., ge=1),
    data: schemas.ProductUpdate = ...,
    db: DB = Depends(get_db)
):
    return crud.update_product(db, product_id, data)

@app.delete(
    "/products/{product_id}",
    status_code=status.HTTP_204_NO_CONTENT
)
def delete_product(
    product_id: int = Path(..., ge=1),
    db: DB = Depends(get_db)
):
    crud.delete_product(db, product_id)
//
# Add product
curl -X POST http://127.0.0.1:8000/products -H "Content-Type: application/json" \
     -d '{"name":"Desk Lamp","price":19.99,"in_stock":50,"category":"Home"}'

# List all available products in category "Home"
curl "http://127.0.0.1:8000/products?category=Home&available=true"

# Update stock
curl -X PUT http://127.0.0.1:8000/products/1 -H "Content-Type: application/json" \
     -d '{"in_stock":40}'
