from sqlalchemy.orm import Session
from fastapi import HTTPException, status
from . import models, schemas

def get_product(db: Session, product_id: int) -> models.Product:
    product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not product:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Product not found")
    return product

def list_products(db: Session, category: str | None, available: bool | None):
    query = db.query(models.Product)
    if category:
        query = query.filter(models.Product.category == category)
    if available is not None:
        query = query.filter(models.Product.available == available)
    return query.all()

def create_product(db: Session, data: schemas.ProductCreate):
    product = models.Product(**data.dict())
    db.add(product)
    db.commit()
    db.refresh(product)
    return product

def update_product(db: Session, product_id: int, data: schemas.ProductUpdate):
    product = get_product(db, product_id)
    for field, value in data.dict(exclude_unset=True).items():
        setattr(product, field, value)
    db.commit()
    db.refresh(product)
    return product

def delete_product(db: Session, product_id: int):
    product = get_product(db, product_id)
    db.delete(product)
    db.commit()
